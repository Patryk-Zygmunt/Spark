/**
 * This class is generated by jOOQ
 */
package pl.edu.agh.kis.florist.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import pl.edu.agh.kis.florist.db.DefaultSchema;
import pl.edu.agh.kis.florist.db.Keys;
import pl.edu.agh.kis.florist.db.tables.records.SessionDataRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionData extends TableImpl<SessionDataRecord> {

    private static final long serialVersionUID = -556991292;

    /**
     * The reference instance of <code>session_data</code>
     */
    public static final SessionData SESSION_DATA = new SessionData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionDataRecord> getRecordType() {
        return SessionDataRecord.class;
    }

    /**
     * The column <code>session_data.session_id</code>.
     */
    public final TableField<SessionDataRecord, Object> SESSION_ID = createField("session_id", org.jooq.impl.DefaultDataType.getDefaultDataType("TEXT PRIMARY_KEY"), this, "");

    /**
     * The column <code>session_data.user_id</code>.
     */
    public final TableField<SessionDataRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>session_data.last_accessed</code>.
     */
    public final TableField<SessionDataRecord, String> LAST_ACCESSED = createField("last_accessed", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>session_data</code> table reference
     */
    public SessionData() {
        this("session_data", null);
    }

    /**
     * Create an aliased <code>session_data</code> table reference
     */
    public SessionData(String alias) {
        this(alias, SESSION_DATA);
    }

    private SessionData(String alias, Table<SessionDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionData(String alias, Table<SessionDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SessionDataRecord> getPrimaryKey() {
        return Keys.PK_SESSION_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SessionDataRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionDataRecord>>asList(Keys.PK_SESSION_DATA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SessionDataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SessionDataRecord, ?>>asList(Keys.FK_SESSION_DATA_USERS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SessionData as(String alias) {
        return new SessionData(alias, this);
    }

    /**
     * Rename this table
     */
    public SessionData rename(String name) {
        return new SessionData(name, null);
    }
}
