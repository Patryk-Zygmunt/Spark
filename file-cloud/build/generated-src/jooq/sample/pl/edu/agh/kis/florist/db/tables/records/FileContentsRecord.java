/**
 * This class is generated by jOOQ
 */
package pl.edu.agh.kis.florist.db.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import pl.edu.agh.kis.florist.db.tables.FileContents;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileContentsRecord extends UpdatableRecordImpl<FileContentsRecord> implements Record2<Integer, byte[]> {

    private static final long serialVersionUID = 313899305;

    /**
     * Setter for <code>file_contents.file_id</code>.
     */
    public FileContentsRecord setFileId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>file_contents.file_id</code>.
     */
    public Integer getFileId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>file_contents.contents</code>.
     */
    public FileContentsRecord setContents(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>file_contents.contents</code>.
     */
    public byte[] getContents() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return FileContents.FILE_CONTENTS.FILE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field2() {
        return FileContents.FILE_CONTENTS.CONTENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getFileId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value2() {
        return getContents();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileContentsRecord value1(Integer value) {
        setFileId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileContentsRecord value2(byte[] value) {
        setContents(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileContentsRecord values(Integer value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FileContentsRecord
     */
    public FileContentsRecord() {
        super(FileContents.FILE_CONTENTS);
    }

    /**
     * Create a detached, initialised FileContentsRecord
     */
    public FileContentsRecord(Integer fileId, byte[] contents) {
        super(FileContents.FILE_CONTENTS);

        set(0, fileId);
        set(1, contents);
    }
}
