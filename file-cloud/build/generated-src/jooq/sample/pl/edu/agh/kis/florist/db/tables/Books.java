/**
 * This class is generated by jOOQ
 */
package pl.edu.agh.kis.florist.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import pl.edu.agh.kis.florist.db.DefaultSchema;
import pl.edu.agh.kis.florist.db.Keys;
import pl.edu.agh.kis.florist.db.tables.records.BooksRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Books extends TableImpl<BooksRecord> {

    private static final long serialVersionUID = -641912389;

    /**
     * The reference instance of <code>books</code>
     */
    public static final Books BOOKS = new Books();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooksRecord> getRecordType() {
        return BooksRecord.class;
    }

    /**
     * The column <code>books.id</code>.
     */
    public final TableField<BooksRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>books.name</code>.
     */
    public final TableField<BooksRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>books.isbn</code>.
     */
    public final TableField<BooksRecord, String> ISBN = createField("isbn", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * Create a <code>books</code> table reference
     */
    public Books() {
        this("books", null);
    }

    /**
     * Create an aliased <code>books</code> table reference
     */
    public Books(String alias) {
        this(alias, BOOKS);
    }

    private Books(String alias, Table<BooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Books(String alias, Table<BooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BooksRecord> getPrimaryKey() {
        return Keys.PK_BOOKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BooksRecord>> getKeys() {
        return Arrays.<UniqueKey<BooksRecord>>asList(Keys.PK_BOOKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Books as(String alias) {
        return new Books(alias, this);
    }

    /**
     * Rename this table
     */
    public Books rename(String name) {
        return new Books(name, null);
    }
}
