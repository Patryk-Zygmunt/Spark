/**
 * This class is generated by jOOQ
 */
package pl.edu.agh.kis.florist.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import pl.edu.agh.kis.florist.db.DefaultSchema;
import pl.edu.agh.kis.florist.db.Keys;
import pl.edu.agh.kis.florist.db.tables.records.AuthorsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authors extends TableImpl<AuthorsRecord> {

    private static final long serialVersionUID = 2035745644;

    /**
     * The reference instance of <code>authors</code>
     */
    public static final Authors AUTHORS = new Authors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsRecord> getRecordType() {
        return AuthorsRecord.class;
    }

    /**
     * The column <code>authors.id</code>.
     */
    public final TableField<AuthorsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>authors.first_name</code>.
     */
    public final TableField<AuthorsRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>authors.last_name</code>.
     */
    public final TableField<AuthorsRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>authors</code> table reference
     */
    public Authors() {
        this("authors", null);
    }

    /**
     * Create an aliased <code>authors</code> table reference
     */
    public Authors(String alias) {
        this(alias, AUTHORS);
    }

    private Authors(String alias, Table<AuthorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authors(String alias, Table<AuthorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthorsRecord> getPrimaryKey() {
        return Keys.PK_AUTHORS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthorsRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorsRecord>>asList(Keys.PK_AUTHORS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authors as(String alias) {
        return new Authors(alias, this);
    }

    /**
     * Rename this table
     */
    public Authors rename(String name) {
        return new Authors(name, null);
    }
}
